/*
 * Copyright 2020-2022 Foreseeti AB <https://foreseeti.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#id: "org.mal-lang.ztlang"
#version: "1.0.0"


category User {
  asset User {
    | Phishing
      -> userCredentials.Compromise

    & RequestAccess
      -> agent.FormAgent
  }
}

category Device {
  asset Device {
    | Compromise
      -> user.RequestAccess

    # Untrusted [Enabled]
      -> agent.RequirementsFulfilled
  }
}

category Agent {
  asset Agent {
    let allowedResources = user.accessPolicy.resource /\ controlplane.resources

    | FormAgent
      -> RequirementsFulfilled

    & RequirementsFulfilled
        //-> controlplane.AllowAccess
        -> allowedResources().Access
  }
}

category ControlPlane {
  asset ControlPlane {
    //let allowedResources = agent.user.accessPolicy.resource /\ resources
    
    | AllowAccess
      //-> agent.user.resources.Access
      //-> allowedResources().Access
      -> resources.Access


    | DDoS
      -> resources.Deny

    | Compromise
      -> resources.Access
  }
}

category Resource {
  asset EnterpriseResource {
    | Access

    | Deny
  }

  asset AccessPolicies extends EnterpriseResource {
    | Access
      //-> users.Phishing
      -> controlplane.agent.user.Phishing
  }

  asset TrafficLogs extends EnterpriseResource {
    | Access
      //-> users.Phishing
      -> controlplane.agent.user.Phishing
  }
}

category Credentials {
  asset UserCredentials {
    | Compromise
      -> user.RequestAccess
  }
}

associations {
  User [user] 1 <-- uses --> * [devices] Device
  UserCredentials [userCredentials] 1 <-- userCredentials --> 1 [user] User
  Device [device] 1 <-- associatedDevice --> 1 [agent] Agent
  User [user] 1 <-- associatedUser --> 1 [agent] Agent
  //User [users] * <-- requestableResources --> * [resources] EnterpriseResource
  ControlPlane [controlplane] 1 <-- allowsAccess --> * [resources] EnterpriseResource
  Agent [agent] * <-- allowsAccess --> 1 [controlplane] ControlPlane

  User [user] 1 <-- accessPolicies --> 1 [accessPolicy] AccessPolicies
  AccessPolicies [accessPolicy] * <-- accessPolicies --> * [resource] EnterpriseResource
}
